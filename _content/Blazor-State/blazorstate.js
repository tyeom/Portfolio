(()=>{"use strict";var e={136:function(e,o,t){var s=this&&this.__awaiter||function(e,o,t,s){return new(t||(t=Promise))((function(n,a){function i(e){try{r(s.next(e))}catch(e){a(e)}}function l(e){try{r(s.throw(e))}catch(e){a(e)}}function r(e){var o;e.done?n(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(i,l)}r((s=s.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.BlazorState=void 0;const n=t(738);o.BlazorState=class{DispatchRequest(e,o){return s(this,void 0,void 0,(function*(){const t=JSON.stringify(o);console.log(`Dispatching request of Type ${e}: ${t}`),yield window[n.JsonRequestHandlerName].invokeMethodAsync(n.JsonRequestHandlerMethodName,e,t)}))}}},738:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.ReduxExtensionName=o.ReduxDevToolsName=o.ReduxDevToolsFactoryName=o.JsonRequestHandlerName=o.JsonRequestHandlerMethodName=o.InitializeJavaScriptInteropName=o.DevToolsName=o.BlazorStateName=void 0,o.BlazorStateName="BlazorState",o.DevToolsName="devTools",o.InitializeJavaScriptInteropName="InitializeJavaScriptInterop",o.JsonRequestHandlerMethodName="Handle",o.JsonRequestHandlerName="jsonRequestHandler",o.ReduxDevToolsFactoryName="ReduxDevToolsFactory",o.ReduxDevToolsName="reduxDevTools",o.ReduxExtensionName="__REDUX_DEVTOOLS_EXTENSION__"},530:(e,o,t)=>{const s=t(136),n=t(79),a=t(738);console.log("Initialize BlazorState"),"undefined"==typeof window||window[a.BlazorStateName]||(window[a.BlazorStateName]=new s.BlazorState,window[a.InitializeJavaScriptInteropName]=function(e){console.log("InitializeJavaScriptInterop"),window[a.JsonRequestHandlerName]=e},window[a.ReduxDevToolsFactoryName]=function(){const e=new n.ReduxDevTools;return window[a.ReduxDevToolsName]=e,e.IsEnabled})},79:(e,o,t)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.ReduxDevTools=void 0;const s=t(738);o.ReduxDevTools=class{constructor(){this.MessageHandler=e=>{console.log("ReduxDevTools.MessageHandler"),console.log(e);const o=this.MapRequestType(e);o?this.BlazorState.DispatchRequest(o,e):console.log("messages of this type are currently not supported")},this.BlazorState=window[s.BlazorStateName],this.Config={name:"Blazor State",features:{pause:!1,lock:!1,persist:!1,export:!1,import:!1,jump:!1,skip:!1,reorder:!1,dispatch:!1,test:!1}},this.Extension=this.GetExtension(),this.DevTools=this.GetDevTools(),this.IsEnabled=!!this.DevTools,this.Init()}Init(){this.IsEnabled&&(this.DevTools.subscribe(this.MessageHandler),window[s.DevToolsName]=this.DevTools)}GetExtension(){const e=window[s.ReduxExtensionName];return e||console.log("Redux DevTools are not installed."),e}GetDevTools(){const e=this.Extension&&this.Extension.connect(this.Config);return e||console.log("Unable to connect to Redux DevTools."),e}MapRequestType(e){var o;switch(e.type){case"START":o="BlazorState.Pipeline.ReduxDevTools.StartRequest";break;case"STOP":break;case"DISPATCH":o={COMMIT:void 0,IMPORT_STATE:void 0,JUMP_TO_ACTION:"BlazorState.Pipeline.ReduxDevTools.JumpToStateRequest",JUMP_TO_STATE:"BlazorState.Pipeline.ReduxDevTools.JumpToStateRequest",RESET:void 0,ROLLBACK:void 0,TOGGLE_ACTION:void 0}[e.payload.type]}return o&&console.log(`Redux Dev tools type: ${e.type} maps to ${o}`),o}ReduxDevToolsDispatch(e,o){return"init"===e?window[s.DevToolsName].init(o):window[s.DevToolsName].send(e,o)}}}},o={};!function t(s){if(o[s])return o[s].exports;var n=o[s]={exports:{}};return e[s].call(n.exports,n,n.exports,t),n.exports}(530)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,